name: Build and Publish Electron App

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  create-tag:
    # Run on push to main branch or when pushing tags
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.create_or_use_tag.outputs.new_tag }}
      version: ${{ steps.create_or_use_tag.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Create or use existing tag
        id: create_or_use_tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # If this is a tag push, use the existing tag
            TAG_NAME=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_NAME#v}
            echo "🏷️ Using existing tag: $TAG_NAME"
          else
            # If this is a push to main, increment version and create a new tag
            echo "🔄 Auto-incrementing version for main branch push..."
            
            # Get current version from package.json
            CURRENT_VERSION=$(node -e "console.log(require('./packages/desktop/package.json').version)")
            echo "📋 Current version: $CURRENT_VERSION"
            
            # Auto-increment patch version (e.g., 1.0.3 → 1.0.4)
            NEW_VERSION=$(node -e "
              const version = '$CURRENT_VERSION';
              const parts = version.split('.');
              parts[2] = (parseInt(parts[2]) + 1).toString();
              console.log(parts.join('.'));
            ")
            
            echo "⬆️ New version: $NEW_VERSION"
            
            # Update package.json with new version
            node -e "
              const fs = require('fs');
              const path = 'packages/desktop/package.json';
              const pkg = JSON.parse(fs.readFileSync(path, 'utf8'));
              pkg.version = '$NEW_VERSION';
              fs.writeFileSync(path, JSON.stringify(pkg, null, 2) + '\n');
              console.log('✅ Updated package.json to version', pkg.version);
            "
            
            # Commit the version bump
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add packages/desktop/package.json
            git commit -m "🔖 Bump version to $NEW_VERSION"
            
            # Create new tag with clean version
            TAG_NAME="v${NEW_VERSION}"
            
            echo "📝 Creating new tag: $TAG_NAME"
            git tag $TAG_NAME
            
            # Push both commit and tag
            git push origin HEAD:main
            git push origin $TAG_NAME
            
            echo "✅ Created and pushed tag: $TAG_NAME"
            
            # Use the new version
            VERSION=$NEW_VERSION
          fi
          
          echo "📋 Final tag: $TAG_NAME, Version: $VERSION"
          
          # Set outputs
          echo "new_tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Generate automatic release notes
          echo "📝 Generating release notes..."
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "📋 Changes since $LAST_TAG:"
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s" | head -20)
          else
            echo "📋 Initial release - all changes:"
            COMMITS=$(git log --oneline --pretty=format:"- %s" | head -20)
          fi
          
          # Create release notes
          VERSION="${{ steps.create_or_use_tag.outputs.version }}"
          cat > release_notes.md << EOF
          ## 🚀 What's New in v$VERSION
          
          This release includes the following changes:
          
          ### 📋 Changes
          $COMMITS
          
          ### 📦 Downloads
          - **macOS**: Download the DMG file and use the included installation helper if needed
          - **Linux**: Use the .deb, .rpm, or .AppImage file depending on your distribution  
          - **Windows**: Use the .exe installer
          
          ### ⚠️ Installation Notes
          - **macOS users**: DMG opens normally → drag app to Applications → right-click app → Open (first time)
          - **Linux users**: Choose the package format that matches your distribution
          - **Windows users**: Run the .exe installer with administrator privileges if needed
          
          ### 🍎 macOS Security Process
          1. Open the downloaded DMG file
          2. Drag Cyoda.app to Applications folder
          3. **First launch**: Right-click the app → "Open" (not double-click)
          4. Click "Open" in the security dialog
          5. Subsequent launches work normally
          
          ### 🔧 Technical Details
          - Built with Electron Forge
          - Cross-platform support (Linux x64/arm64, macOS arm64, Windows x64)
          - Automatic version incrementing (v$VERSION)
          - Enhanced macOS quarantine handling
          EOF
          
          echo "✅ Release notes generated"

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md
          retention-days: 1

  # Cross-platform build with matrix strategy
  build:
    needs: [ create-tag ]
    if: always() && needs.create-tag.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64,arm64
            artifact_name: cyoda-linux
            files: |
              packages/desktop/out/cyoda-build/make/*.deb
              packages/desktop/out/cyoda-build/make/*.rpm
              packages/desktop/out/cyoda-build/make/*.tar.gz
              packages/desktop/out/cyoda-build/make/*.AppImage
          - os: macos-latest
            platform: darwin
            arch: arm64
            artifact_name: cyoda-macos-arm64
            files: |
              packages/desktop/out/cyoda-build/make/*.dmg
              packages/desktop/out/cyoda-build/make/*.zip
          - os: windows-latest
            platform: win32
            arch: x64
            artifact_name: cyoda-windows-x64
            files: |
              packages/desktop/out/cyoda-build/make/*.exe
              packages/desktop/out/cyoda-build/make/*.msi
              packages/desktop/out/cyoda-build/make/*.nupkg
    runs-on: ${{ matrix.os }}
    env:
      NODE_OPTIONS: --disable-warning=DEP0174
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VITE_APP_API_BASE: ${{ vars.VITE_APP_API_BASE }}
      VITE_APP_BASE_URL: ${{ vars.VITE_APP_BASE_URL }}
      VITE_APP_AUTH0_DOMAIN: ${{ vars.VITE_APP_AUTH0_DOMAIN }}
      VITE_APP_AUTH0_CLIENT_ID: ${{ vars.VITE_APP_AUTH0_CLIENT_ID }}
      VITE_APP_AUTH0_AUDIENCE: ${{ vars.VITE_APP_AUTH0_AUDIENCE }}
      VITE_APP_AUTH0_REDIRECT_URI: ${{ vars.VITE_APP_AUTH0_REDIRECT_URI }}
      VITE_APP_AUTH0_ORGANIZATION: ${{ vars.VITE_APP_AUTH0_ORGANIZATION }}
      VITE_IS_ELECTRON: true
      # Apple signing credentials (optional for macOS)
      ENABLE_CODE_SIGNING: ${{ secrets.ENABLE_CODE_SIGNING || 'false' }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.new_tag || github.ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn/cache
            node_modules
            packages/desktop/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare Yarn version
        run: |
          echo "🔄 Setting up Yarn..."
          corepack prepare yarn@4.5.3 --activate
          yarn --version
          echo "✅ Yarn version ready"
        shell: bash

      - name: Install workspace dependencies
        run: |
          echo "🔄 Installing workspace dependencies..."
          yarn install
          echo "✅ Workspace dependencies installed"
          echo "📋 Workspace info:"
          yarn workspaces list
        shell: bash

      - name: Validate package version
        run: |
          VERSION="${{ needs.create-tag.outputs.version }}"
          PACKAGE_VERSION=$(node -e "console.log(require('./packages/desktop/package.json').version)")
          echo "🔄 Expected version: $VERSION"
          echo "📦 Package.json version: $PACKAGE_VERSION"
          
          if [ "$VERSION" != "$PACKAGE_VERSION" ]; then
            echo "⚠️ Version mismatch detected, updating package.json..."
            node -e "
              const fs = require('fs');
              const path = 'packages/desktop/package.json';
              const pkg = JSON.parse(fs.readFileSync(path, 'utf8'));
              pkg.version = process.argv[1];
              fs.writeFileSync(path, JSON.stringify(pkg, null, 2) + '\n');
              console.log('✅ Version updated to', pkg.version);
            " "$VERSION"
          else
            echo "✅ Version is already correct"
          fi
        shell: bash

      - name: Download release notes
        if: needs.create-tag.outputs.new_tag != ''
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Build for Linux
        if: matrix.platform == 'linux'
        run: |
          echo "🔧 Building for Linux..."
          yarn workspace desktop make --platform=linux --arch=${{ matrix.arch }}
        timeout-minutes: 10
        shell: bash

      - name: Build for macOS (unsigned)
        if: matrix.platform == 'darwin'
        run: |
          echo "🔧 Building for macOS (unsigned)..."
          yarn workspace desktop make:unsigned
          
          echo "🔧 Preparing unsigned app for distribution..."
          cd packages/desktop
          
          # Find and process .app files with ad-hoc signing
          find out -name "*.app" -type d | while read APP_PATH; do
            echo "📱 Processing: $APP_PATH"
            
            # Find the main executable and make it executable
            MAIN_EXEC=$(find "$APP_PATH/Contents/MacOS" -type f -executable | head -1)
            if [ -n "$MAIN_EXEC" ]; then
              echo "🔍 Found main executable: $MAIN_EXEC"
              chmod +x "$MAIN_EXEC"
            fi
            
            # Make all files in MacOS directory executable
            find "$APP_PATH/Contents/MacOS" -type f -exec chmod +x {} \; 2>/dev/null || true
            
            # Ad-hoc sign the application (this allows macOS Security to show proper dialog)
            echo "🔏 Ad-hoc signing application..."
            codesign --force --deep --sign - "$APP_PATH" 2>/dev/null || true
            
            echo "✅ Processed and signed: $APP_PATH"
          done
          
          # Process and sign .dmg files (simple approach)
          find out -name "*.dmg" -type f | while read DMG_PATH; do
            echo "💿 Processing DMG: $DMG_PATH"
            # Just ad-hoc sign the DMG - no quarantine removal
            codesign --force --sign - "$DMG_PATH" 2>/dev/null || true
            echo "✅ DMG signed: $DMG_PATH"
          done

          # Process .zip archives for macOS (they may contain .app bundles)
          find out -name "*darwin*.zip" -o -name "*mac*.zip" -o -name "*osx*.zip" | while read ZIP_PATH; do
            echo "📦 Processing macOS ZIP: $ZIP_PATH"
            
            # Create temp directory for extraction
            TEMP_DIR=$(mktemp -d)
            cd "$TEMP_DIR"
            
            # Extract and sign .app bundles
            if unzip -q "$OLDPWD/$ZIP_PATH" 2>/dev/null; then
              find . -name "*.app" -type d | while read APP_IN_ZIP; do
                echo "🔏 Signing app in ZIP: $APP_IN_ZIP"
                
                # Make executables executable
                if [[ -d "$APP_IN_ZIP/Contents/MacOS" ]]; then
                  find "$APP_IN_ZIP/Contents/MacOS" -type f -exec chmod +x {} \; 2>/dev/null || true
                fi
                
                # Ad-hoc sign the app (keeps quarantine for proper macOS security dialog)
                codesign --force --deep --sign - "$APP_IN_ZIP" 2>/dev/null || true
              done
              
              # Recreate the ZIP
              rm -f "$OLDPWD/$ZIP_PATH"
              zip -r "$OLDPWD/$ZIP_PATH" . 2>/dev/null || true
            fi
            
            cd "$OLDPWD"
            rm -rf "$TEMP_DIR"
            
            echo "✅ ZIP processed: $ZIP_PATH"
          done

          # Create installation script for macOS
          cat > out/install-macos.sh << 'INSTALL_SCRIPT'
          #!/bin/bash
          echo "🍎 macOS Installation Helper"
          echo "This script helps with the initial app launch process"
          echo ""
          echo "ℹ️  Standard macOS Security Process:"
          echo "   1. Open the DMG file normally"
          echo "   2. Drag the app to Applications folder"
          echo "   3. Right-click the app → Open (first time only)"
          echo "   4. Click 'Open' in the security dialog"
          echo ""
          echo "If you need to force-remove quarantine attributes, use this script:"
          echo ""
          
          # Function to clean an app (for troubleshooting only)
          clean_app() {
              local app_path="$1"
              if [[ -d "$app_path" ]]; then
                  echo "🧹 Removing quarantine from: $app_path"
                  sudo xattr -d com.apple.quarantine "$app_path" 2>/dev/null || true
                  find "$app_path/Contents/MacOS" -type f -exec chmod +x {} \; 2>/dev/null || true
                  echo "✅ Quarantine removed"
              else
                  echo "❌ App not found: $app_path"
              fi
          }
          
          # Check if argument provided
          if [[ $# -eq 0 ]]; then
              echo "💡 For normal installation, just right-click the app and select 'Open'"
              echo ""
              echo "For troubleshooting, use: $0 <path-to-app>"
              echo "Example: $0 /Applications/cyoda.app"
              exit 0
          fi
          
          TARGET="$1"
          
          if [[ "$TARGET" == *.app ]]; then
              clean_app "$TARGET"
              echo ""
              echo "🎉 Try launching the app now!"
          else
              echo "❌ Please provide a .app file"
              echo "Example: $0 /Applications/cyoda.app"
              exit 1
          fi
          INSTALL_SCRIPT

          chmod +x out/install-macos.sh

          echo "✅ macOS build processing complete"
        timeout-minutes: 10
        continue-on-error: true

      - name: List macOS build artifacts
        if: matrix.platform == 'darwin'
        run: |
          echo "📂 Listing all files in packages/desktop/out directory:"
          find packages/desktop/out -type f -name "*" | head -20
          
          echo "📦 Checking specific file types:"
          echo "DMG files:"
          find packages/desktop/out -name "*.dmg" -type f || echo "No DMG files found"
          echo "ZIP files:"
          find packages/desktop/out -name "*.zip" -type f || echo "No ZIP files found"
        shell: bash

      - name: Build for Windows
        if: matrix.platform == 'win32'
        run: |
          echo "🔧 Building for Windows..."
          yarn workspace desktop make --platform=win32 --arch=${{ matrix.arch }}
        timeout-minutes: 10
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.files }}
          if-no-files-found: warn
          retention-days: 30

      - name: Set release body (Linux only)
        if: matrix.platform == 'linux'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-tag.outputs.new_tag || github.ref_name }}
          name: "Cyoda Platform v${{ needs.create-tag.outputs.version || github.ref_name }}"
          body_path: ${{ github.workspace }}/release_notes.md
          files: ${{ matrix.files }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          prerelease: false
          make_latest: true

      - name: Upload to GitHub Releases (macOS/Windows)
        if: matrix.platform != 'linux'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-tag.outputs.new_tag || github.ref_name }}
          files: ${{ matrix.files }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          prerelease: false
          append_body: true
          make_latest: true

  # Cleanup source code archives from release
  cleanup-release:
    needs: [ create-tag, build ]
    if: always() && needs.create-tag.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Remove source code archives
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = '${{ needs.create-tag.outputs.new_tag || github.ref_name }}';
            
            try {
              // Get the release
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tagName
              });
              
              console.log(`🔍 Found release: ${release.data.name} (${release.data.tag_name})`);
              
              // Get all assets
              const assets = await github.rest.repos.listReleaseAssets({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id
              });
              
              // Find and delete source code archives
              for (const asset of assets.data) {
                if (asset.name.includes('Source code') || asset.name.endsWith('.tar.gz') || 
                    (asset.name.endsWith('.zip') && asset.name.includes(tagName))) {
                  console.log(`🗑️ Deleting source archive: ${asset.name}`);
                  await github.rest.repos.deleteReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    asset_id: asset.id
                  });
                  console.log(`✅ Deleted: ${asset.name}`);
                }
              }
              
              console.log('🎉 Source code archives cleanup completed');
            } catch (error) {
              console.log(`⚠️ Cleanup error: ${error.message}`);
              // Don't fail the workflow if cleanup fails
            }
