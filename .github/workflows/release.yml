name: Build and Publish Electron App

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  create-tag:
    # Run on push to main branch or when pushing tags
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.create_or_use_tag.outputs.new_tag }}
      version: ${{ steps.create_or_use_tag.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Create or use existing tag
        id: create_or_use_tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # If this is a tag push, use the existing tag
            TAG_NAME=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_NAME#v}
            echo "🏷️ Using existing tag: $TAG_NAME"
          else
            # If this is a push to main, increment version and create a new tag
            echo "🔄 Auto-incrementing version for main branch push..."
            
            # Get current version from package.json
            CURRENT_VERSION=$(node -e "console.log(require('./packages/desktop/package.json').version)")
            echo "📋 Current version: $CURRENT_VERSION"
            
            # Auto-increment patch version (e.g., 1.0.3 → 1.0.4)
            NEW_VERSION=$(node -e "
              const version = '$CURRENT_VERSION';
              const parts = version.split('.');
              parts[2] = (parseInt(parts[2]) + 1).toString();
              console.log(parts.join('.'));
            ")
            
            echo "⬆️ New version: $NEW_VERSION"
            
            # Create new tag with clean version (WITHOUT committing version change)
            TAG_NAME="v${NEW_VERSION}"
            
            # Check if tag already exists
            if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
              echo "🏷️ Tag $TAG_NAME already exists, using existing tag"
              echo "📋 No new tag created"
            else
              echo "📝 Creating new tag: $TAG_NAME"
              git tag $TAG_NAME
              
              # Push only the tag (no commit)
              git push origin $TAG_NAME
              
              echo "✅ Created and pushed tag: $TAG_NAME"
            fi
            
            # Use the new version
            VERSION=$NEW_VERSION
          fi
          
          echo "📋 Final tag: $TAG_NAME, Version: $VERSION"
          
          # Set outputs
          echo "new_tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Generate automatic release notes
          echo "📝 Generating release notes..."
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "📋 Changes since $LAST_TAG:"
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s" | head -20)
          else
            echo "📋 Initial release - all changes:"
            COMMITS=$(git log --oneline --pretty=format:"- %s" | head -20)
          fi
          
          # Create release notes
          VERSION="${{ steps.create_or_use_tag.outputs.version }}"
          cat > release_notes.md << EOF
          ## 🚀 What's New in v$VERSION
          
          This release includes the following changes:
          
          ### 📋 Changes
          $COMMITS
          
          ### 📦 Downloads
          - **macOS**: Download the ZIP file for easier installation (no DMG quarantine issues)
          - **Linux**: Use the .deb, .rpm, or .AppImage file depending on your distribution  
          - **Windows**: Use the .exe installer
          
          ### ⚠️ Installation Notes
          - **macOS users**: Extract ZIP → drag app to Applications → double-click to launch (or right-click → Open if needed)
          - **Linux users**: Choose the package format that matches your distribution
          - **Windows users**: Run the .exe installer with administrator privileges if needed
          
          ### 🍎 macOS ZIP Installation (Simplified)
          1. Download and extract the ZIP file
          2. Drag Cyoda.app to Applications folder
          3. **First launch**: Right-click Cyoda.app → "Open" (required for unsigned apps)
          4. Click "Open" in the security dialog
          5. Subsequent launches work normally
          
          **Why ZIP instead of DMG?** ZIP archives typically have fewer macOS quarantine/security issues!
          
          **Note**: This app is unsigned but safe to run. We skip code signing to avoid keychain access requests during build.
          
          ### 🔧 Technical Details
          - Built with Electron Forge
          - Cross-platform support (Linux x64/arm64, macOS arm64, Windows x64)
          - Automatic version incrementing (v$VERSION)
          - Enhanced macOS quarantine handling
          EOF
          
          echo "✅ Release notes generated"

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md
          retention-days: 1

  # Cross-platform build with matrix strategy
  build:
    needs: [ create-tag ]
    if: always() && needs.create-tag.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64,arm64
            artifact_name: cyoda-linux
            files: packages/desktop/dist-release/*
          - os: macos-latest
            platform: darwin
            arch: arm64
            artifact_name: cyoda-macos-arm64
            files: packages/desktop/dist-release/*
          - os: windows-latest
            platform: win32
            arch: x64
            artifact_name: cyoda-windows-x64
            files: packages/desktop/dist-release/*
    runs-on: ${{ matrix.os }}
    env:
      NODE_OPTIONS: --disable-warning=DEP0174
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VITE_APP_API_BASE: ${{ vars.VITE_APP_API_BASE }}
      VITE_APP_BASE_URL: ${{ vars.VITE_APP_BASE_URL }}
      VITE_APP_AUTH0_DOMAIN: ${{ vars.VITE_APP_AUTH0_DOMAIN }}
      VITE_APP_AUTH0_CLIENT_ID: ${{ vars.VITE_APP_AUTH0_CLIENT_ID }}
      VITE_APP_AUTH0_AUDIENCE: ${{ vars.VITE_APP_AUTH0_AUDIENCE }}
      VITE_APP_AUTH0_REDIRECT_URI: ${{ vars.VITE_APP_AUTH0_REDIRECT_URI }}
      VITE_APP_AUTH0_ORGANIZATION: ${{ vars.VITE_APP_AUTH0_ORGANIZATION }}
      VITE_IS_ELECTRON: true
      # Apple signing credentials (optional for macOS)
      ENABLE_CODE_SIGNING: ${{ secrets.ENABLE_CODE_SIGNING || 'false' }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.new_tag || github.ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn/cache
            node_modules
            packages/desktop/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare Yarn version
        run: |
          echo "🔄 Setting up Yarn..."
          corepack prepare yarn@4.5.3 --activate
          yarn --version
          echo "✅ Yarn version ready"
        shell: bash

      - name: Install workspace dependencies
        run: |
          echo "🔄 Installing workspace dependencies..."
          yarn install
          echo "✅ Workspace dependencies installed"
          echo "📋 Workspace info:"
          yarn workspaces list
        shell: bash

      - name: Validate package version
        run: |
          VERSION="${{ needs.create-tag.outputs.version }}"
          PACKAGE_VERSION=$(node -e "console.log(require('./packages/desktop/package.json').version)")
          echo "🔄 Expected version: $VERSION"
          echo "📦 Package.json version: $PACKAGE_VERSION"
          
          if [ "$VERSION" != "$PACKAGE_VERSION" ]; then
            echo "⚠️ Version mismatch detected, updating package.json..."
            node -e "
              const fs = require('fs');
              const path = 'packages/desktop/package.json';
              const pkg = JSON.parse(fs.readFileSync(path, 'utf8'));
              pkg.version = process.argv[1];
              fs.writeFileSync(path, JSON.stringify(pkg, null, 2) + '\n');
              console.log('✅ Version updated to', pkg.version);
            " "$VERSION"
          else
            echo "✅ Version is already correct"
          fi
        shell: bash

      - name: Download release notes
        if: needs.create-tag.outputs.new_tag != ''
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Build for Linux
        if: matrix.platform == 'linux'
        run: |
          echo "🔧 Building for Linux..."
          yarn workspace desktop make --platform=linux --arch=${{ matrix.arch }}
        timeout-minutes: 10
        shell: bash

      - name: Prepare Linux Release Files
        if: matrix.platform == 'linux'
        run: |
          echo "📦 Preparing Linux release files..."
          cd packages/desktop
          
          # Create release directory
          mkdir -p dist-release
          
          # Copy only the files we want
          find out -name "*.deb" -exec cp {} dist-release/ \;
          find out -name "*.rpm" -exec cp {} dist-release/ \;
          find out -name "*.AppImage" -exec cp {} dist-release/ \;
          find out -name "*.tar.gz" -exec cp {} dist-release/ \;
          
          echo "✅ Linux release files prepared:"
          ls -la dist-release/
        shell: bash

      - name: Build for macOS (ZIP-only)
        if: matrix.platform == 'darwin'
        run: |
          echo "🔧 Building for macOS (ZIP-only distribution)..."
          yarn workspace desktop make:unsigned
          
          echo "🔧 Preparing ZIP archives for better macOS compatibility..."
          cd packages/desktop
          
          # Remove DMG files to force ZIP-only distribution
          find out -name "*.dmg" -type f -delete 2>/dev/null || true
          echo "🗑️ Removed DMG files to ensure ZIP-only distribution"
          
          # Remove helper ZIP files that are not needed for distribution
          find out -name "Cyoda.Helper*.zip" -type f -delete 2>/dev/null || true
          echo "🗑️ Removed Cyoda.Helper*.zip files (not needed for distribution)"
          
          # Process .app files with improved signing and quarantine removal
          find out -name "*.app" -type d | while read APP_PATH; do
            echo "📱 Processing app bundle: $APP_PATH"
            
            # Remove quarantine attributes from the .app bundle entirely (before permissions)
            echo "🧹 Removing quarantine attributes from app bundle..."
            xattr -cr "$APP_PATH" 2>/dev/null || true
            xattr -d com.apple.quarantine "$APP_PATH" 2>/dev/null || true
            
            # Make all executables in MacOS directory executable
            if [[ -d "$APP_PATH/Contents/MacOS" ]]; then
              find "$APP_PATH/Contents/MacOS" -type f -exec chmod +x {} \; 2>/dev/null || true
              echo "✅ Made executables in MacOS directory executable"
            fi
            
            # Set proper permissions for the entire app bundle
            chmod -R 755 "$APP_PATH" 2>/dev/null || true
            
            # Remove extended attributes that might cause issues
            find "$APP_PATH" -type f -exec xattr -c {} \; 2>/dev/null || true
            
            # Code signing for macOS
            if [[ "$ENABLE_CODE_SIGNING" == "true" ]] && [[ -n "$APPLE_IDENTITY" ]]; then
              echo "🔐 Code signing app bundle..."
              
              # Sign all executables and frameworks first
              find "$APP_PATH" \( -name "*.dylib" -o -name "*.framework" -o -name "*.so" \) -exec codesign --force --verify --verbose --sign "$APPLE_IDENTITY" {} \; 2>/dev/null || true
              
              # Sign the main app bundle
              codesign --force --verify --verbose --sign "$APPLE_IDENTITY" --entitlements "${PWD}/build/entitlements.mac.plist" "$APP_PATH" 2>/dev/null || {
                echo "⚠️ Code signing failed, but continuing..."
              }
              
              echo "✅ Code signing completed"
            else
              echo "ℹ️ Skipping code signing (ENABLE_CODE_SIGNING=${ENABLE_CODE_SIGNING})"
            fi
            
            echo "✅ Processed: $APP_PATH"
          done

          # Process and optimize .zip archives for macOS
          find out -name "*.zip" -type f | while read ZIP_PATH; do
            echo "📦 Optimizing ZIP for macOS: $ZIP_PATH"
            
            # Create temp directory for ZIP processing
            TEMP_DIR=$(mktemp -d)
            ORIGINAL_DIR=$(pwd)
            cd "$TEMP_DIR"
            
            # Extract the ZIP
            if unzip -q "$ORIGINAL_DIR/$ZIP_PATH" 2>/dev/null; then
              echo "📂 Extracted ZIP contents"
              
              # Process any .app bundles in the ZIP
              find . -name "*.app" -type d | while read APP_IN_ZIP; do
                echo "🍎 Processing app in ZIP: $APP_IN_ZIP"
                
                # Remove ALL quarantine attributes recursively (multiple methods)
                xattr -cr "$APP_IN_ZIP" 2>/dev/null || true
                xattr -d com.apple.quarantine "$APP_IN_ZIP" 2>/dev/null || true
                find "$APP_IN_ZIP" -type f -exec xattr -c {} \; 2>/dev/null || true
                find "$APP_IN_ZIP" -type d -exec xattr -c {} \; 2>/dev/null || true
                
                # Set proper permissions for the entire app bundle
                chmod -R 755 "$APP_IN_ZIP" 2>/dev/null || true
                
                # Make executables in MacOS directory properly executable
                if [[ -d "$APP_IN_ZIP/Contents/MacOS" ]]; then
                  find "$APP_IN_ZIP/Contents/MacOS" -type f -exec chmod +x {} \; 2>/dev/null || true
                  echo "✅ Made MacOS executables executable"
                fi
                
                # Make sure Info.plist is readable
                if [[ -f "$APP_IN_ZIP/Contents/Info.plist" ]]; then
                  chmod 644 "$APP_IN_ZIP/Contents/Info.plist" 2>/dev/null || true
                fi
                
                # Code signing for macOS (in ZIP)
                if [[ "$ENABLE_CODE_SIGNING" == "true" ]] && [[ -n "$APPLE_IDENTITY" ]]; then
                  echo "🔐 Code signing app in ZIP..."
                  
                  # Sign all executables and frameworks first
                  find "$APP_IN_ZIP" \( -name "*.dylib" -o -name "*.framework" -o -name "*.so" \) -exec codesign --force --verify --verbose --sign "$APPLE_IDENTITY" {} \; 2>/dev/null || true
                  
                  # Sign the main app bundle
                  codesign --force --verify --verbose --sign "$APPLE_IDENTITY" "$APP_IN_ZIP" 2>/dev/null || {
                    echo "⚠️ Code signing failed in ZIP, but continuing..."
                  }
                  
                  echo "✅ Code signing completed in ZIP"
                else
                  echo "ℹ️ Skipping code signing in ZIP (ENABLE_CODE_SIGNING=${ENABLE_CODE_SIGNING})"
                fi
                
                echo "✅ Optimized app in ZIP: $APP_IN_ZIP"
              done
              
              # Recreate ZIP with better compression and no extra attributes
              rm -f "$ORIGINAL_DIR/$ZIP_PATH"
              # Use ditto for better macOS compatibility
              if command -v ditto >/dev/null 2>&1; then
                # Create ZIP using ditto for better macOS attribute preservation
                ditto -c -k --keepParent . "$ORIGINAL_DIR/$ZIP_PATH" 2>/dev/null || \
                zip -r "$ORIGINAL_DIR/$ZIP_PATH" . -x "*.DS_Store" "__MACOSX/*" 2>/dev/null || true
              else
                zip -r "$ORIGINAL_DIR/$ZIP_PATH" . -x "*.DS_Store" "__MACOSX/*" 2>/dev/null || true
              fi
              echo "✅ Recreated optimized ZIP with better macOS compatibility"
            else
              echo "⚠️ Could not extract ZIP, keeping original"
            fi
            
            cd "$ORIGINAL_DIR"
            rm -rf "$TEMP_DIR"
          done

          echo "✅ macOS ZIP-only build processing complete"
          
          # Prepare macOS Release Files
          echo "📦 Preparing macOS release files..."
          mkdir -p dist-release
          
          # Get version from environment
          VERSION="${{ needs.create-tag.outputs.version }}"
          
          # First, ensure we have ZIP files (create if they don't exist)
          echo "🔍 Ensuring ZIP files exist..."
          ZIP_COUNT=$(find out -name "*.zip" -not -name "*Helper*.zip" -type f | wc -l)
          echo "📊 Found $ZIP_COUNT existing ZIP files"
          
          if [ "$ZIP_COUNT" -eq 0 ]; then
            echo "⚠️ No ZIP files found, creating them manually..."
               # Look for MAIN .app files and create ZIP archives (exclude Helper apps)
          find out -name "*.app" -type d -not -name "*Helper*" | while read APP_PATH; do
            APP_NAME=$(basename "$APP_PATH")
            ZIP_NAME="${APP_NAME%.app}.zip"
            ZIP_DIR=$(dirname "$APP_PATH")
            
            echo "📦 Creating ZIP for main app: $APP_PATH"
            cd "$ZIP_DIR"
            
            # Remove quarantine attributes before zipping
            xattr -cr "$APP_NAME" 2>/dev/null || true
            find "$APP_NAME" -type f -exec xattr -c {} \; 2>/dev/null || true
            
            # Use ditto for better macOS compatibility if available
            if command -v ditto >/dev/null 2>&1; then
              ditto -c -k --keepParent "$APP_NAME" "$ZIP_NAME" 2>/dev/null || \
              zip -r "$ZIP_NAME" "$APP_NAME" -x "*.DS_Store" "__MACOSX/*" 2>/dev/null || true
            else
              zip -r "$ZIP_NAME" "$APP_NAME" -x "*.DS_Store" "__MACOSX/*" 2>/dev/null || true
            fi
            
            # Remove quarantine from created ZIP
            if [[ -f "$ZIP_NAME" ]]; then
              xattr -c "$ZIP_NAME" 2>/dev/null || true
            fi
            
            echo "✅ Created: $ZIP_DIR/$ZIP_NAME"
            cd - >/dev/null
          done
            
            # Check again after manual creation
            NEW_ZIP_COUNT=$(find out -name "*.zip" -not -name "*Helper*.zip" -type f | wc -l)
            echo "📊 After manual creation: $NEW_ZIP_COUNT ZIP files"
          fi
          
          # Now find and copy/rename ZIP files with clear macOS naming
          find out -name "*.zip" -not -name "*Helper*.zip" -type f | while read ZIP_FILE; do
            if [ -f "$ZIP_FILE" ]; then
              BASENAME=$(basename "$ZIP_FILE" .zip)
              NEW_NAME="Cyoda-macOS-${VERSION}.zip"
              
              echo "📦 Copying and renaming ZIP: $ZIP_FILE -> dist-release/$NEW_NAME"
              cp "$ZIP_FILE" "dist-release/$NEW_NAME"
            fi
          done
          
          # If still no files, create a fallback ZIP from any .app found
          if [ ! -f dist-release/Cyoda-macOS-${VERSION}.zip ]; then
            echo "🆘 No ZIP files copied, creating fallback..."
            
            APP_FILE=$(find out -name "*.app" -type d -not -name "*Helper*" | head -1)
            if [ -n "$APP_FILE" ] && [ -d "$APP_FILE" ]; then
              echo "📱 Creating fallback ZIP from: $APP_FILE"
              cd "$(dirname "$APP_FILE")"
              
              APP_NAME=$(basename "$APP_FILE")
              
              # Remove quarantine attributes before zipping
              xattr -cr "$APP_NAME" 2>/dev/null || true
              find "$APP_NAME" -type f -exec xattr -c {} \; 2>/dev/null || true
              
              if command -v ditto >/dev/null 2>&1; then
                ditto -c -k --keepParent "$APP_NAME" "../dist-release/Cyoda-macOS-${VERSION}.zip" 2>/dev/null || \
                zip -r "../dist-release/Cyoda-macOS-${VERSION}.zip" "$APP_NAME" -x "*.DS_Store" "__MACOSX/*" 2>/dev/null || true
              else
                zip -r "../dist-release/Cyoda-macOS-${VERSION}.zip" "$APP_NAME" -x "*.DS_Store" "__MACOSX/*" 2>/dev/null || true
              fi
              
              # Remove quarantine from created ZIP
              if [[ -f "../dist-release/Cyoda-macOS-${VERSION}.zip" ]]; then
                xattr -c "../dist-release/Cyoda-macOS-${VERSION}.zip" 2>/dev/null || true
              fi
              
              cd - >/dev/null
              echo "✅ Created fallback ZIP: dist-release/Cyoda-macOS-${VERSION}.zip"
            else
              echo "❌ No .app files found for fallback ZIP creation"
            fi
          fi
          
          echo "✅ macOS release files prepared:"
          ls -la dist-release/
          
          # Final verification
          if [ -f "dist-release/Cyoda-macOS-${VERSION}.zip" ]; then
            echo "✅ SUCCESS: macOS ZIP file created: Cyoda-macOS-${VERSION}.zip"
            echo "📊 File size: $(ls -lh dist-release/Cyoda-macOS-${VERSION}.zip | awk '{print $5}')"
          else
            echo "❌ FAILED: macOS ZIP file was not created"
            echo "📂 Contents of dist-release directory:"
            ls -la dist-release/ || echo "dist-release directory not found"
            echo "📂 Contents of out directory:"
            find out -type f | head -10 || echo "out directory not found"
          fi
        timeout-minutes: 10
        continue-on-error: true

      - name: List macOS build artifacts
        if: matrix.platform == 'darwin'
        run: |
          echo "📂 Listing ALL files in packages/desktop/out directory:"
          find packages/desktop/out -type f | head -30
          
          echo ""
          echo "🔍 Searching for ZIP files in all subdirectories:"
          find packages/desktop -name "*.zip" -type f 2>/dev/null || echo "No ZIP files found anywhere"
          
          echo ""
          echo "📂 Directory structure of packages/desktop/out:"
          find packages/desktop/out -type d 2>/dev/null || echo "out directory not found"
          
          echo ""
          echo "🔍 Looking for make directory and contents:"
          if [ -d "packages/desktop/out/make" ]; then
            echo "✅ make directory exists"
            ls -la packages/desktop/out/make/
          else
            echo "❌ make directory not found"
          fi
          
          echo ""
          echo "🔍 Checking for cyoda-build directory:"
          if [ -d "packages/desktop/out/cyoda-build" ]; then
            echo "✅ cyoda-build directory exists"
            find packages/desktop/out/cyoda-build -type f | head -20
          else
            echo "❌ cyoda-build directory not found"
          fi
        shell: bash

      - name: Build for Windows
        if: matrix.platform == 'win32'
        run: |
          echo "🔧 Building for Windows..."
          yarn workspace desktop make --platform=win32 --arch=${{ matrix.arch }}
          
          # Remove unwanted Windows artifacts
          cd packages/desktop
          find out -name "Cyoda.Helper*.zip" -type f -delete 2>/dev/null || true
          find out -name "Squirrel.exe" -type f -delete 2>/dev/null || true
          find out -name "cyoda.exe" -type f -delete 2>/dev/null || true
          echo "🗑️ Removed unwanted Windows artifacts"
          
          # Diagnostic: List Windows build outputs
          echo "📂 Listing ALL files in out directory:"
          find out -type f 2>/dev/null || echo "out directory not found"
          
          echo ""
          echo "🔍 Searching for distribution files:"
          find out -name "*Setup*.exe" -type f 2>/dev/null || echo "No Setup.exe files found"
          find out -name "*.msi" -type f 2>/dev/null || echo "No .msi files found"
          find out -name "*-full.nupkg" -type f 2>/dev/null || echo "No .nupkg files found"
          
          echo ""
          echo "📂 Directory structure of out:"
          find out -type d 2>/dev/null || echo "out directory not found"
          
          # Count distribution files
          SETUP_COUNT=$(find out -name "*Setup*.exe" -type f 2>/dev/null | wc -l)
          MSI_COUNT=$(find out -name "*.msi" -type f 2>/dev/null | wc -l)
          NUPKG_COUNT=$(find out -name "*-full.nupkg" -type f 2>/dev/null | wc -l)
          
          echo "📊 Found $SETUP_COUNT Setup.exe files"
          echo "📊 Found $MSI_COUNT MSI files"
          echo "📊 Found $NUPKG_COUNT NuPkg files"
        timeout-minutes: 10
        shell: bash

      - name: Prepare Windows Release Files
        if: matrix.platform == 'win32'
        run: |
          echo "📦 Preparing Windows release files..."
          cd packages/desktop
          
          # Create release directory
          mkdir -p dist-release
          
          # Copy only the files we want (excluding unwanted ones)
          find out -name "*.exe" -not -name "cyoda.exe" -not -name "Squirrel.exe" -exec cp {} dist-release/ \;
          find out -name "*.msi" -exec cp {} dist-release/ \;
          find out -name "*.nupkg" -exec cp {} dist-release/ \;
          
          echo "✅ Windows release files prepared:"
          ls -la dist-release/
        timeout-minutes: 10
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.files }}
          if-no-files-found: warn
          retention-days: 30

      - name: Set release body (Linux only)
        if: matrix.platform == 'linux'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-tag.outputs.new_tag || github.ref_name }}
          name: "Cyoda Platform v${{ needs.create-tag.outputs.version || github.ref_name }}"
          body_path: ${{ github.workspace }}/release_notes.md
          files: ${{ matrix.files }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          prerelease: false
          make_latest: true

      - name: Upload to GitHub Releases (macOS/Windows)
        if: matrix.platform != 'linux'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-tag.outputs.new_tag || github.ref_name }}
          files: ${{ matrix.files }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          prerelease: false
          append_body: true
          make_latest: true

  # Cleanup source code archives from release
  cleanup-release:
    needs: [ create-tag, build ]
    if: always() && needs.create-tag.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Remove source code archives
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = '${{ needs.create-tag.outputs.new_tag || github.ref_name }}';
            
            try {
              // Get the release
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tagName
              });
              
              console.log(`🔍 Found release: ${release.data.name} (${release.data.tag_name})`);
              
              // Get all assets
              const assets = await github.rest.repos.listReleaseAssets({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id
              });
              
              // Find and delete only source code archives (our files are now clean)
              for (const asset of assets.data) {
                const shouldDelete = (
                  asset.name.includes('Source code') ||
                  (asset.name.endsWith('.tar.gz') && asset.name.includes(tagName)) ||
                  (asset.name.endsWith('.zip') && asset.name.includes(tagName))
                );
                
                if (shouldDelete) {
                  console.log(`🗑️ Deleting source archive: ${asset.name}`);
                  await github.rest.repos.deleteReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    asset_id: asset.id
                  });
                  console.log(`✅ Deleted: ${asset.name}`);
                }
              }
              
              console.log('🎉 Source code archives cleanup completed');
            } catch (error) {
              console.log(`⚠️ Cleanup error: ${error.message}`);
              // Don't fail the workflow if cleanup fails
            }
