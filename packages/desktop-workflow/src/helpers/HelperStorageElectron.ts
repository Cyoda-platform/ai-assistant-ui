/**
 * Helper –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å electron-store —á–µ—Ä–µ–∑ IPC
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π contextBridge API –≤–º–µ—Å—Ç–æ require
 */

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è electronAPI
interface ElectronAPI {
  storage: {
    set: (key: string, value: any) => Promise<boolean>;
    get: (key: string, defaultValue?: any) => Promise<any>;
    has: (key: string) => Promise<boolean>;
    delete: (key: string) => Promise<boolean>;
    clear: () => Promise<boolean>;
    keys: () => Promise<string[]>;
    size: () => Promise<number>;
    path: () => Promise<string>;
  };
}

declare global {
  interface Window {
    electronAPI: ElectronAPI;
  }
}

class HelperStorageElectron {
    private static get electronAPI() {
        if (!window.electronAPI?.storage) {
            throw new Error('electronAPI.storage is not available. Make sure preload script is properly configured.');
        }
        return window.electronAPI.storage;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
     */
    static async set(key: string, value: any): Promise<void> {
        await this.electronAPI.set(key, value);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    static async get(key: string, defaultValue?: any): Promise<any> {
        return this.electronAPI.get(key, defaultValue);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
     */
    static async has(key: string): Promise<boolean> {
        return this.electronAPI.has(key);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    static async remove(key: string): Promise<void> {
        await this.electronAPI.delete(key);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
     */
    static async clear(): Promise<void> {
        await this.electronAPI.clear();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏
     */
    static async getKeys(): Promise<string[]> {
        return await this.electronAPI.keys();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    static async getSize(): Promise<number> {
        return await this.electronAPI.size();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    static async getPath(): Promise<string> {
        return await this.electronAPI.path();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
     */
    static async showStorageInfo(): Promise<void> {
        try {
            const path = await this.getPath();
            const size = await this.getSize();
            const keys = await this.getKeys();
            
            console.group('üóÑÔ∏è Storage Info');
            console.log('üìÅ Path:', path);
            console.log('üìä Size:', size, 'keys');
            console.log('üîë Keys:', keys);
            console.groupEnd();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
            if (keys.length > 0) {
                console.group('üìã Storage Contents');
                for (const key of keys) {
                    const value = await this.get(key);
                    console.log(`${key}:`, value);
                }
                console.groupEnd();
            }
        } catch (error) {
            console.error('‚ùå Error showing storage info:', error);
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON
     */
    static async exportData(): Promise<Record<string, any>> {
        const keys = await this.getKeys();
        const data: Record<string, any> = {};
        
        for (const key of keys) {
            data[key] = await this.get(key);
        }
        
        return data;
    }
}

export default HelperStorageElectron;