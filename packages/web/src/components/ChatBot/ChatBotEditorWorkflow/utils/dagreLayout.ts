/**
 * Dagre-based layout utilities for workflow editor
 * Simpler alternative to ELK with better support fo        if (hasGlobalOverlap(label1, label2)) {
          hasGlobalCollisions = true;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ª–∏ transitions –∫ –æ–¥–Ω–æ–π –ø–∞—Ä–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
          const parts1 = label1.transitionKey.split('|||');
          const parts2 = label2.transitionKey.split('|||');
          const samePair = parts1.length >= 2 && parts2.length >= 2 &&
                          parts1[0] === parts2[0] && parts1[1] === parts2[1];

          if (samePair) {
            // –î–ª—è transitions –æ–¥–Ω–æ–π –ø–∞—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            const pairSeparation = 80; // –±—ã–ª–æ 120
            const centerY = (label1.y + label2.y) / 2;

            if (label1.transitionKey < label2.transitionKey) {
              label1.y = centerY - pairSeparation / 2;
              label2.y = centerY + pairSeparation / 2;
            } else {
              label1.y = centerY + pairSeparation / 2;
              label2.y = centerY - pairSeparation / 2;
            }

            console.log(`üö® SAME PAIR separation: ${label1.transitionKey} -> Y=${label1.y}, ${label2.transitionKey} -> Y=${label2.y}`);
          } else {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–¥–≤–∏–≥–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
            const forcedSeparation = 100; // –±—ã–ª–æ 130
            const centerY = (label1.y + label2.y) / 2;

            if (label1.transitionKey < label2.transitionKey) {
              label1.y = centerY - forcedSeparation / 2;
              label2.y = centerY + forcedSeparation / 2;
            } else {
              label1.y = centerY + forcedSeparation / 2;
              label2.y = centerY - forcedSeparation / 2;
            }

            console.log(`üö® DIFFERENT PAIR separation: ${label1.transitionKey} -> Y=${label1.y}, ${label2.transitionKey} -> Y=${label2.y}`);
          }
 */

import dagre from 'dagre';

type TransitionPosition = {
  transitionKey: string;
  x: number;
  y: number;
  width: number;
  height: number;
  originalX?: number;
  originalY?: number;
};

// –ü—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
function resolveVerticalTransitionCollisions(
  positions: Array<{
    transitionKey: string;
    x: number;
    y: number;
    width: number;
    height: number;
  }>,
  nodePositions?: { [key: string]: { x: number; y: number } },
  nodeWidths?: Map<string, number>,
  nodeHeights?: Map<string, number>
): TransitionPosition[] {
  console.log('üîß Starting vertical collision resolution for', positions.length, 'transitions');

  const result = positions.map(p => ({
    ...p,
    originalX: p.x,
    originalY: p.y
  }));

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ Y (–ø–æ—á—Ç–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —É—Ä–æ–≤–µ–Ω—å) –∏ —Ä–∞–∑–≤–æ–¥–∏–º –ø–æ X –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
  const yThreshold = 12; // –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –±–ª–∏–∑–∫–æ –ø–æ Y
  const groups = new Map<string, TransitionPosition[]>();

  result.forEach(label => {
    const groupKey = `y_${Math.round(label.y / yThreshold) * yThreshold}`;
    if (!groups.has(groupKey)) groups.set(groupKey, []);
    groups.get(groupKey)!.push(label);
  });

  console.log('üìä Found', groups.size, 'vertical Y-groups');

  groups.forEach((groupLabels, key) => {
    if (groupLabels.length <= 1) return;

    // –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: –ø–æ –∫–ª—é—á—É
    groupLabels.sort((a, b) => a.transitionKey.localeCompare(b.transitionKey));

    // –¶–µ–Ω—Ç—Ä –ø–æ X: —Å—Ä–µ–¥–Ω–µ–µ –æ—Ç originalX, Y –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (–Ω–µ –¥–≤–∏–≥–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏)
    const centerX = groupLabels.reduce((sum, l) => sum + (l.originalX ?? l.x), 0) / groupLabels.length;
    const maxWidth = Math.max(...groupLabels.map(l => Math.max(80, l.width || 80)));
    const spacing = Math.max(60, maxWidth + 24); // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª–µ–π–±–ª–∞–º–∏ –ø–æ X
    const startX = centerX - spacing * (groupLabels.length - 1) / 2;

    console.log(`ÔøΩ Resolving ${groupLabels.length} overlaps in ${key}: centerX=${centerX}, spacing=${spacing}`);

    groupLabels.forEach((label, idx) => {
      const newX = Math.round(startX + idx * spacing);
      // Y —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ–∫–æ–ª–æ originalY, —á—Ç–æ–±—ã –Ω–µ —É–µ–∑–∂–∞—Ç—å –Ω–∏–∂–µ/–≤—ã—à–µ —É–∑–ª–æ–≤
      const newY = Math.round(label.originalY ?? label.y);
      console.log(`  üìç ${label.transitionKey}: X ${label.x} -> ${newX}, Y stays ${newY}`);
      label.x = newX;
      label.y = newY;
    });
  });

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const intersects = (a: {left:number;right:number;top:number;bottom:number}, b: {left:number;right:number;top:number;bottom:number}) =>
    !(a.right < b.left || b.right < a.left || a.bottom < b.top || b.bottom < a.top);

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–∞–∑–¥–≤–∏–∂–∫–∞ –ø–æ X –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
  const margin = 10;
  for (let pass = 0; pass < 3; pass++) {
    let moved = false;
    for (let i = 0; i < result.length; i++) {
      for (let j = i + 1; j < result.length; j++) {
        const li = result[i];
        const lj = result[j];
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–ª–∏–∑–∫–∏ –ø–æ Y (–æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å) –∏ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
        if (Math.abs(li.y - lj.y) <= 14) {
          const ri = { left: li.x - (li.width||80)/2, right: li.x + (li.width||80)/2, top: li.y - (li.height||25)/2, bottom: li.y + (li.height||25)/2 };
          const rj = { left: lj.x - (lj.width||80)/2, right: lj.x + (lj.width||80)/2, top: lj.y - (lj.height||25)/2, bottom: lj.y + (lj.height||25)/2 };
          if (intersects(ri, rj)) {
            const desiredGap = ((li.width||80)/2 + (lj.width||80)/2) + margin;
            const dx = lj.x - li.x;
            const adjust = (desiredGap - Math.abs(dx)) / 2;
            if (dx >= 0) {
              li.x -= adjust;
              lj.x += adjust;
            } else {
              li.x += adjust;
              lj.x -= adjust;
            }
            moved = true;
          }
        }
      }
    }
    if (!moved) break;
  }

  // –ò–∑–±–µ–≥–∞–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —É–∑–ª—ã (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
  if (nodePositions && nodeWidths && nodeHeights) {
    const nodes = Object.keys(nodePositions).map(id => {
      const w = nodeWidths.get(id) || 160;
      const h = nodeHeights.get(id) || 60;
      const cx = nodePositions[id].x;
      const cy = nodePositions[id].y;
      return { left: cx - w/2, right: cx + w/2, top: cy - h/2, bottom: cy + h/2 };
    });

    result.forEach(l => {
      let rect = { left: l.x - (l.width||80)/2, right: l.x + (l.width||80)/2, top: l.y - (l.height||25)/2, bottom: l.y + (l.height||25)/2 };
      let attempts = 0;
      while (attempts < 10 && nodes.some(n => intersects(rect, n))) {
        // –°–¥–≤–∏–≥–∞–µ–º –ø–æ X –æ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∑–ª–∞
        const overlapping = nodes.filter(n => intersects(rect, n))[0];
        const centerX = (rect.left + rect.right) / 2;
        const nodeCenterX = (overlapping.left + overlapping.right) / 2;
        const dir = centerX < nodeCenterX ? -1 : 1;
        l.x += dir * 20;
        // –ù–µ–±–æ–ª—å—à–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å–¥–≤–∏–≥ –ø–æ Y –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (attempts > 4) {
          const dy = (attempts - 4) * 2;
          l.y = (l.originalY ?? l.y) + (attempts % 2 === 0 ? dy : -dy);
        }
        rect = { left: l.x - (l.width||80)/2, right: l.x + (l.width||80)/2, top: l.y - (l.height||25)/2, bottom: l.y + (l.height||25)/2 };
        attempts++;
      }
    });
  }

  console.log('‚úÖ Vertical collision resolution completed (spread X, global de-overlap, node avoidance)');
  return result;
}

// –ü—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
function resolveHorizontalTransitionCollisions(
  positions: Array<{
    transitionKey: string;
    x: number;
    y: number;
    width: number;
    height: number;
  }>
): TransitionPosition[] {
  console.log('üîß Starting horizontal collision resolution for', positions.length, 'transitions');

  const result = positions.map(p => ({
    ...p,
    originalX: p.x,
    originalY: p.y
  }));

  // –ü—Ä–æ—Å—Ç–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–æ—á–µ–Ω—å –±–ª–∏–∑–∫–∏–º)
  const threshold = 10; // –ï—Å–ª–∏ transitions –±–ª–∏–∂–µ 10px, —Å—á–∏—Ç–∞–µ–º –∏—Ö –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–º–∏—Å—è
  const groups = new Map<string, TransitionPosition[]>();

  result.forEach(label => {
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –≥—Ä—É–ø–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º –ø–æ—Ä–æ–≥–æ–º
    const groupKey = `${Math.round(label.x / threshold) * threshold}_${Math.round(label.y / threshold) * threshold}`;
    if (!groups.has(groupKey)) {
      groups.set(groupKey, []);
    }
    groups.get(groupKey)!.push(label);
  });

  console.log('üìä Found', groups.size, 'transition groups');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
  groups.forEach((groupLabels, groupKey) => {
    if (groupLabels.length > 1) {
      console.log(`üîß Resolving ${groupLabels.length} overlapping transitions in group ${groupKey}`);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ transitionKey –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      groupLabels.sort((a, b) => a.transitionKey.localeCompare(b.transitionKey));

      // –†–∞–∑–º–µ—â–∞–µ–º transitions –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
      const baseY = groupLabels[0].y;
      const verticalSpacing = 50; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É labels
      const totalHeight = (groupLabels.length - 1) * verticalSpacing;
      const startY = baseY - totalHeight / 2;

      groupLabels.forEach((label, index) => {
        const newY = startY + index * verticalSpacing;
        console.log(`  üìç Moving ${label.transitionKey} from Y=${label.y} to Y=${newY} (spacing=${verticalSpacing})`);
        label.y = newY;
      });
    }
  });

  console.log('‚úÖ Horizontal collision resolution completed with minimal spacing');
  return result;
}

export interface NodePosition {
  x: number;
  y: number;
}

// Explicit workflow types (same as in smartLayout.ts)
export interface Transition {
  next: string;
  condition?: unknown;
  criteria?: unknown;
  criterion?: unknown;
  name?: string;
  manual?: boolean;
  processors?: Array<{
    name: string;
    config?: Record<string, unknown>;
  }>;
}

export type Transitions = Array<Transition> | Record<string, Transition>;

export interface WorkflowState {
  transitions?: Transitions;
  [key: string]: unknown;
}

export type WorkflowStates = Record<string, WorkflowState>;

// –û—Ü–µ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã –ª–µ–π–±–ª–∞ –ø–æ –¥–ª–∏–Ω–µ –∏–º–µ–Ω–∏ transition (—É—á–∏—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç—Å—Ç—É–ø—ã)
function estimateLabelWidth(name?: string): number {
  const text = (name || '').trim();
  const charWidth = 9; // –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ —Å–∏–º–≤–æ–ª (—É—á–∏—Ç—ã–≤–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
  const actionsWidth = 60; // –º–µ—Å—Ç–æ –ø–æ–¥ –∫–Ω–æ–ø–∫–∏
  const padding = 24; // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
  const base = 100; // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
  const width = text.length > 0 ? text.length * charWidth + actionsWidth + padding : base;
  return Math.max(base, Math.min(width, 280)); // –æ–≥—Ä–∞–Ω–∏—á–∏–º –º–∞–∫—Å–∏–º—É–º, —á—Ç–æ–±—ã –Ω–µ —É–ª–µ—Ç–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
}

function calculateNodeHeight(isVertical: boolean): number {
  return isVertical ? 60 : 80; // –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É
}

export async function applyDagreLayout(
  states: WorkflowStates,
  initialState: string,
  isVertical: boolean = false
): Promise<{
  nodePositions: { [key: string]: NodePosition };
  transitionPositions: { [key: string]: {x: number, y: number} };
}> {
  console.log('üöÄ applyDagreLayout called with:', {
    stateCount: Object.keys(states || {}).length,
    isVertical,
    initialState
  });

  const nodePositions: { [key: string]: NodePosition } = {};
  const transitionPositions: { [key: string]: {x: number, y: number} } = {};

  if (!states || typeof states !== 'object') {
    return { nodePositions, transitionPositions };
  }

  const stateNames = Object.keys(states);
  if (stateNames.length === 0) {
    return { nodePositions, transitionPositions };
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  function normalizeTransitions(transitions: Transitions | undefined): Transition[] {
    if (!transitions) return [];
    if (Array.isArray(transitions)) return transitions;
    return Object.values(transitions);
  }

  // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ Dagre —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä—ë–±–µ—Ä
  const g = new dagre.graphlib.Graph({ multigraph: true });
  g.setGraph({
    rankdir: isVertical ? 'TB' : 'LR',
    align: 'UL',
    nodesep: isVertical ? 60 : 150,
    ranksep: isVertical ? 90 : 250, // –£–º–µ—Ä–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    marginx: 40,
    marginy: isVertical ? 20 : 50
  });
  g.setDefaultEdgeLabel(() => ({}));

  // –°–±–æ—Ä –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
  const allTransitions: Array<{
    from: string;
    to: string;
    name?: string;
    transitionKey: string;
  }> = [];

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —É–∑–ª–æ–≤
  const nodeWidths = new Map<string, number>();
  const nodeHeights = new Map<string, number>();

  // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –∏ —Ä—ë–±—Ä–∞ –≤ –≥—Ä–∞—Ñ
  for (const stateName of stateNames) {
    const state = states[stateName];
    const transitions = normalizeTransitions(state.transitions);

    const nodeWidth = 200; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è layout —Ä–∞—Å—á–µ—Ç–æ–≤
    const nodeHeight = calculateNodeHeight(isVertical);

    nodeWidths.set(stateName, nodeWidth);
    nodeHeights.set(stateName, nodeHeight);

    g.setNode(stateName, {
      width: nodeWidth,
      height: nodeHeight,
      label: stateName
    });

    transitions.forEach((transition, idx) => {
      if (transition.next && states[transition.next]) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ||| –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è pairKey (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å underscores)
        const transitionKey = `${stateName}|||${transition.next}|||${idx}`;

        allTransitions.push({
          from: stateName,
          to: transition.next,
          name: transition.name,
          transitionKey
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –¥–ª—è multigraph
        g.setEdge(stateName, transition.next, {
          id: transitionKey,
          label: transition.name || ''
        }, transitionKey);
      }
    });
  }

  console.log('üìù Graph setup complete:', {
    nodes: g.nodes().length,
    edges: g.edges().length,
    allTransitions: allTransitions.length
  });

  // –ü—Ä–∏–º–µ–Ω—è–µ–º layout
  dagre.layout(g);

  console.log('‚ú® Dagre layout complete, extracting positions...');

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–æ–≤
  g.nodes().forEach(nodeId => {
    const node = g.node(nodeId);
    nodePositions[nodeId] = { x: node.x, y: node.y };
    console.log(`üìç Node ${nodeId}: (${node.x}, ${node.y}), size: ${node.width}x${node.height}`);
  });

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è edge ID —Å transition key –∏ internalTransitionId
  const transitionMap = new Map<string, string>();
  const keyToInternalId = new Map<string, string>();

  // –°–≤—è–∑—ã–≤–∞–µ–º transitionKey —Å internalTransitionId
  allTransitions.forEach(transition => {
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è internalTransitionId
    let transitionName = transition.name;

    // –ï—Å–ª–∏ –∏–º—è transition –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ transitionKey
    if (!transitionName || transitionName.trim() === '') {
      const parts = transition.transitionKey.split('|||');
      const idx = parts[2] || '0';
      transitionName = `transition_${idx}`;
    }

    const internalTransitionId = `${transition.from}-${transitionName}`;
    keyToInternalId.set(transition.transitionKey, internalTransitionId);

    console.log(`üîó Mapping: ${transition.transitionKey} -> ${internalTransitionId} (original name: "${transition.name}")`);
  });

  g.edges().forEach(edge => {
    const edgeData = g.edge(edge);
    if (edgeData.id) {
      transitionMap.set(edgeData.id, edgeData.id);
    }
  });

  console.log('üîó TransitionMap entries:', Array.from(transitionMap.entries()));
  console.log('üóùÔ∏è KeyToInternalId mapping:', Array.from(keyToInternalId.entries()));

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º transitions –ø–æ –ø–∞—Ä–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  // –í–ê–ñ–ù–û: —É—á–∏—Ç—ã–≤–∞–µ–º bidirectional —Å–≤—è–∑–∏ (A->B –∏ B->A —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–¥–Ω—É –ø–∞—Ä—É)
  const pairTransitions = new Map<string, Array<{
    transitionKey: string;
    name?: string;
    from: string;
    to: string;
  }>>();

  allTransitions.forEach(transition => {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –ø–∞—Ä—ã (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
    const nodeA = transition.from;
    const nodeB = transition.to;
    const normalizedPairKey = nodeA < nodeB ? `${nodeA}|||${nodeB}` : `${nodeB}|||${nodeA}`;

    if (!pairTransitions.has(normalizedPairKey)) {
      pairTransitions.set(normalizedPairKey, []);
    }

    pairTransitions.get(normalizedPairKey)!.push({
      transitionKey: transition.transitionKey,
      name: transition.name,
      from: transition.from,
      to: transition.to
    });
  });

  console.log('üë• Bidirectional transition pairs:', Array.from(pairTransitions.entries()).map(([key, transitions]) => ({
    pair: key,
    count: transitions.length,
    transitions: transitions.map(t => `${t.from}->${t.to}:${t.name}`)
  })));

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ transitions –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ collision resolution
  const allTransitionPositions: Array<{
    transitionKey: string;
    x: number;
    y: number;
    width: number;
    height: number;
    targetNode: string;
  }> = [];

  // –†–∞–∑–º–µ—â–∞–µ–º transitions –¥–ª—è –∫–∞–∂–¥–æ–π bidirectional –ø–∞—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
  for (const [pairKey, transitionGroup] of pairTransitions.entries()) {
    console.log(`üéØ Processing bidirectional transition group for ${pairKey}:`, {
      count: transitionGroup.length,
      transitions: transitionGroup.map(t => `${t.from}->${t.to}:${t.name}`)
    });

    if (transitionGroup.length > 1) {
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ transitions –º–µ–∂–¥—É –ø–∞—Ä–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤–∫–ª—é—á–∞—è bidirectional)
      // –†–∞–∑–Ω–æ—Å–∏–º –∏—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä—É –∫ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
      const [nodeA, nodeB] = pairKey.split('|||');
      const nodeAData = g.node(nodeA);
      const nodeBData = g.node(nodeB);

      if (!nodeAData || !nodeBData) {
        console.warn(`‚ö†Ô∏è Missing node data for bidirectional pair ${pairKey}`);
        continue;
      }

      // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
      const centerX = (nodeAData.x + nodeBData.x) / 2;
      const centerY = (nodeAData.y + nodeBData.y) / 2;

      // –ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è —Ä–∞–∑–Ω–µ—Å–µ–Ω–∏—è
      const edgeVectorX = nodeBData.x - nodeAData.x;
      const edgeVectorY = nodeBData.y - nodeAData.y;
      const edgeLength = Math.sqrt(edgeVectorX * edgeVectorX + edgeVectorY * edgeVectorY);

      let perpX = 0;
      let perpY = 0;

      if (edgeLength > 0) {
        // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
        perpX = -edgeVectorY / edgeLength;
        perpY = edgeVectorX / edgeLength;
      }

      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É labels
      const labelSpacing = 50;
      const totalWidth = (transitionGroup.length - 1) * labelSpacing;
      const startOffset = -totalWidth / 2;

      transitionGroup.forEach((item, idx) => {
        const offset = startOffset + idx * labelSpacing;
        const finalLabelX = centerX + perpX * offset;
        const finalLabelY = centerY + perpY * offset;

        // –û—Ü–µ–Ω–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã transition label
        const labelWidth = estimateLabelWidth(item.name);
        const labelHeight = 25;

        allTransitionPositions.push({
          transitionKey: item.transitionKey,
          x: finalLabelX,
          y: finalLabelY,
          width: labelWidth,
          height: labelHeight,
          targetNode: item.to
        });

        console.log(`‚ûï Added bidirectional transition position for ${item.transitionKey} (${item.from}->${item.to})`);
      });
    } else {
      // –û–¥–∏–Ω–æ—á–Ω—ã–π transition
      const item = transitionGroup[0];
      const fromNode = g.node(item.from);
      const toNode = g.node(item.to);

      if (!fromNode || !toNode) {
        console.warn(`‚ö†Ô∏è Missing node data for single transition ${item.from}->${item.to}`);
        continue;
      }

      const baseLabelX = (fromNode.x + toNode.x) / 2;
      const baseLabelY = (fromNode.y + toNode.y) / 2;
      const labelWidth = estimateLabelWidth(item.name);
      const labelHeight = 25;

      allTransitionPositions.push({
        transitionKey: item.transitionKey,
        x: baseLabelX,
        y: baseLabelY,
        width: labelWidth,
        height: labelHeight,
        targetNode: item.to
      });

      console.log(`‚ûï Added single transition position for ${item.transitionKey}`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–∏–∑–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã, –∫–æ–ª–ª–∏–∑–∏–π –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
  function hasRealCollisions(): boolean {
    const pairCounts = new Map<string, number>();

    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    allTransitions.forEach(t => {
      const pairKey = `${t.from}‚Üí${t.to}`;
      pairCounts.set(pairKey, (pairCounts.get(pairKey) || 0) + 1);
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä—ã —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–∏–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º, –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ–ª–ª–∏–∑–∏–∏
    return Array.from(pairCounts.values()).some(count => count > 1);
  }

  let resolvedPositions: TransitionPosition[];
  if (!hasRealCollisions()) {
    // –ï—Å–ª–∏ –∫–æ–ª–ª–∏–∑–∏–π –Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã), –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ –µ—Å—Ç—å
    console.log('‚úÖ No real collisions detected, keeping original positions');
    resolvedPositions = allTransitionPositions;
  } else if (isVertical) {
    // –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å —É—á–µ—Ç–æ–º –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —É–∑–ª–æ–≤
    resolvedPositions = resolveVerticalTransitionCollisions(
      allTransitionPositions,
      nodePositions,
      nodeWidths,
      nodeHeights
    );
  } else {
    // –î–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
    resolvedPositions = resolveHorizontalTransitionCollisions(allTransitionPositions);
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
  for (const position of resolvedPositions) {
    const edgeInfo = g.edges().find(edge => {
      const edgeData = g.edge(edge);
      return transitionMap.get(edgeData.id) === position.transitionKey;
    });

    let edgeMidX = 0;
    let edgeMidY = 0;

    if (edgeInfo) {
      const sourceNode = g.node(edgeInfo.v);
      const targetNode = g.node(edgeInfo.w);
      edgeMidX = (sourceNode.x + targetNode.x) / 2;
      edgeMidY = (sourceNode.y + targetNode.y) / 2;
    }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–±—Ä–∞
  // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —Ä–µ–±—Ä–∞, –∞ –Ω–µ pre-collision originalX/Y,
  // —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ offsets –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∞–∂–∞–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.
  const originalX = edgeMidX;
  const originalY = edgeMidY;

    const relativeOffset = {
      x: Math.round(position.x - originalX),
      y: Math.round(position.y - originalY)
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –æ–±–æ–∏–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const internalTransitionId = keyToInternalId.get(position.transitionKey);
    if (internalTransitionId) {
      transitionPositions[internalTransitionId] = relativeOffset;
      console.log(`üéØ Mapped ${position.transitionKey} -> ${internalTransitionId}:`, relativeOffset);
    }

    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –∫–∞–∫ fallback
    transitionPositions[position.transitionKey] = relativeOffset;
  }

  console.log('üéØ Dagre Layout Results:');
  console.log('üìä Node positions:', nodePositions);
  console.log('üè∑Ô∏è Transition positions:', transitionPositions);
  console.log('üë• Transition groups:', Array.from(pairTransitions.entries()).map(([key, transitions]) => ({
    pair: key,
    count: transitions.length,
    transitions: transitions.map(t => t.transitionKey)
  })));
  console.log('üîß Collision resolution applied for', allTransitionPositions.length, 'transitions');
  console.log('üìè Final transition positions after collision resolution:', resolvedPositions.length, 'positions');

  return { nodePositions, transitionPositions };
}
