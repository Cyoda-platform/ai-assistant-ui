/**
 * Dagre-based layout utilities for workflow editor
 * Simpler alternative to ELK with better support for dynamic node sizing
 */

import dagre from 'dagre';
import { resolveTransitionCollisions } from './forceDirectedLayout';

type TransitionPosition = {
  transitionKey: string;
  x: number;
  y: number;
  width: number;
  height: number;
  originalX?: number;
  originalY?: number;
};

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
function resolveHorizontalTransitionCollisions(
  positions: Array<{
    transitionKey: string;
    x: number;
    y: number;
    width: number;
    height: number;
  }>
): TransitionPosition[] {
  console.log('üîß Starting simple horizontal collision resolution for', positions.length, 'transitions');
  
  const result = positions.map(p => ({
    ...p,
    originalX: p.x,
    originalY: p.y
  }));
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º labels –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π Y)
  const groups = new Map<number, typeof result>();
  
  result.forEach(label => {
    const roundedY = Math.round(label.y / 25) * 25; // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 25px –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
    if (!groups.has(roundedY)) {
      groups.set(roundedY, []);
    }
    groups.get(roundedY)!.push(label);
  });
  
  // –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —Ä–∞–∑–Ω–µ—Å–µ–º labels –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
  groups.forEach((groupLabels, baseY) => {
    if (groupLabels.length > 1) {
      console.log(`üîß Resolving ${groupLabels.length} overlapping labels at Y=${baseY}`);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ X –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      groupLabels.sort((a, b) => a.x - b.x);
      
      // –†–∞–∑–º–µ—â–∞–µ–º labels —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 50px –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
      const spacing = 50;
      const totalHeight = (groupLabels.length - 1) * spacing;
      const startY = baseY - totalHeight / 2;
      
      groupLabels.forEach((label, index) => {
        label.y = startY + index * spacing;
        console.log(`  üìç Moved ${label.transitionKey} to Y=${label.y}`);
      });
    }
  });
  
  console.log('‚úÖ Horizontal collision resolution completed');
  return result;
}

export interface NodePosition {
  x: number;
  y: number;
}

// Explicit workflow types (same as in smartLayout.ts)
export interface Transition {
  next: string;
  condition?: unknown;
  criteria?: unknown;
  criterion?: unknown;
  name?: string;
  manual?: boolean;
  processors?: Array<{
    name: string;
    config?: Record<string, unknown>;
  }>;
}

export type Transitions = Array<Transition> | Record<string, Transition>;

export interface WorkflowState {
  transitions?: Transitions;
  [key: string]: unknown;
}

export type WorkflowStates = Record<string, WorkflowState>;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —à–∏—Ä–∏–Ω—ã —É–∑–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
function calculateNodeWidth(stateName: string, isVertical: boolean): number {
  const baseWidth = isVertical ? 160 : 200; // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–∑–æ–≤—É—é —à–∏—Ä–∏–Ω—É
  
  if (isVertical) {
    // –ü—Ä–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–∏ —É—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const textLength = stateName.length;
    // –ë–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: 8px –Ω–∞ —Å–∏–º–≤–æ–ª + 50px –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫
    const textWidth = textLength * 8 + 50;
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º –º–µ–∂–¥—É –±–∞–∑–æ–≤–æ–π —à–∏—Ä–∏–Ω–æ–π –∏ —Ç—Ä–µ–±—É–µ–º–æ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    return Math.max(baseWidth, textWidth);
  }
  
  return baseWidth;
}

function calculateNodeHeight(isVertical: boolean): number {
  return isVertical ? 60 : 80; // –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É
}

export async function applyDagreLayout(
  states: WorkflowStates, 
  initialState: string, 
  isVertical: boolean = false
): Promise<{
  nodePositions: { [key: string]: NodePosition };
  transitionPositions: { [key: string]: {x: number, y: number} };
}> {
  console.log('üöÄ applyDagreLayout called with:', {
    stateCount: Object.keys(states || {}).length,
    isVertical,
    initialState
  });
  
  const nodePositions: { [key: string]: NodePosition } = {};
  const transitionPositions: { [key: string]: {x: number, y: number} } = {};
  
  if (!states || typeof states !== 'object') {
    return { nodePositions, transitionPositions };
  }

  const stateNames = Object.keys(states);
  if (stateNames.length === 0) {
    return { nodePositions, transitionPositions };
  }

  // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ Dagre —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä—ë–±–µ—Ä
  const g = new dagre.graphlib.Graph({ multigraph: true });
  g.setGraph({
    rankdir: isVertical ? 'TB' : 'LR',
    align: 'UL',
    nodesep: isVertical ? 100 : 150,
    ranksep: isVertical ? 150 : 200,
    marginx: 50,
    marginy: 50
  });
  g.setDefaultEdgeLabel(() => ({}));

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  function normalizeTransitions(transitions: Transitions | undefined): Transition[] {
    if (!transitions) return [];
    if (Array.isArray(transitions)) return transitions;
    return Object.values(transitions);
  }

  // –°–±–æ—Ä –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
  const allTransitions: Array<{
    from: string;
    to: string;
    name?: string;
    transitionKey: string;
  }> = [];

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —É–∑–ª–æ–≤
  const nodeWidths = new Map<string, number>();
  const nodeHeights = new Map<string, number>();

  // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –∏ —Ä—ë–±—Ä–∞ –≤ –≥—Ä–∞—Ñ
  for (const stateName of stateNames) {
    const state = states[stateName];
    const transitions = normalizeTransitions(state.transitions);
    
    const nodeWidth = calculateNodeWidth(stateName, isVertical);
    const nodeHeight = calculateNodeHeight(isVertical);
    
    nodeWidths.set(stateName, nodeWidth);
    nodeHeights.set(stateName, nodeHeight);
    
    g.setNode(stateName, { 
      width: nodeWidth, 
      height: nodeHeight,
      label: stateName
    });
    
    transitions.forEach((transition, idx) => {
      if (transition.next && states[transition.next]) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ||| –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è pairKey (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å underscores)
        const transitionKey = `${stateName}|||${transition.next}|||${idx}`;
        
        allTransitions.push({
          from: stateName,
          to: transition.next,
          name: transition.name,
          transitionKey
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–±—Ä–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –¥–ª—è multigraph
        g.setEdge(stateName, transition.next, { 
          id: transitionKey,
          label: transition.name || ''
        }, transitionKey);
      }
    });
  }

  console.log('üìù Graph setup complete:', {
    nodes: g.nodes().length,
    edges: g.edges().length,
    allTransitions: allTransitions.length
  });

  // –ü—Ä–∏–º–µ–Ω—è–µ–º layout
  dagre.layout(g);

  console.log('‚ú® Dagre layout complete, extracting positions...');

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–æ–≤
  g.nodes().forEach(nodeId => {
    const node = g.node(nodeId);
    nodePositions[nodeId] = { x: node.x, y: node.y };
    console.log(`üìç Node ${nodeId}: (${node.x}, ${node.y}), size: ${node.width}x${node.height}`);
  });

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è edge ID —Å transition key –∏ internalTransitionId
  const transitionMap = new Map<string, string>();
  const keyToInternalId = new Map<string, string>();
  
  // –°–≤—è–∑—ã–≤–∞–µ–º transitionKey —Å internalTransitionId
  allTransitions.forEach(transition => {
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è internalTransitionId
    let transitionName = transition.name;
    
    // –ï—Å–ª–∏ –∏–º—è transition –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ transitionKey
    if (!transitionName || transitionName.trim() === '') {
      const parts = transition.transitionKey.split('|||');
      const idx = parts[2] || '0';
      transitionName = `transition_${idx}`;
    }
    
    const internalTransitionId = `${transition.from}-${transitionName}`;
    keyToInternalId.set(transition.transitionKey, internalTransitionId);
    
    console.log(`üîó Mapping: ${transition.transitionKey} -> ${internalTransitionId} (original name: "${transition.name}")`);
  });
  
  g.edges().forEach(edge => {
    const edgeData = g.edge(edge);
    if (edgeData.id) {
      transitionMap.set(edgeData.id, edgeData.id);
    }
  });

  console.log('üîó TransitionMap entries:', Array.from(transitionMap.entries()));
  console.log('üóùÔ∏è KeyToInternalId mapping:', Array.from(keyToInternalId.entries()));

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º transitions –ø–æ –ø–∞—Ä–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  const pairTransitions = new Map<string, Array<{
    transitionKey: string;
    name?: string;
  }>>();

  allTransitions.forEach(transition => {
    const pairKey = `${transition.from}|||${transition.to}`;
    if (!pairTransitions.has(pairKey)) {
      pairTransitions.set(pairKey, []);
    }
    pairTransitions.get(pairKey)!.push({
      transitionKey: transition.transitionKey,
      name: transition.name
    });
  });

  console.log('üë• Transition pairs:', Array.from(pairTransitions.entries()).map(([key, transitions]) => ({
    pair: key,
    count: transitions.length
  })));

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ transitions –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ collision resolution
  const allTransitionPositions: Array<{
    transitionKey: string;
    x: number;
    y: number;
    width: number;
    height: number;
  }> = [];

  // –†–∞–∑–º–µ—â–∞–µ–º transitions –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
  for (const [pairKey, transitionGroup] of pairTransitions.entries()) {
    const [fromState, toState] = pairKey.split('|||');
    
    const fromNode = g.node(fromState);
    const toNode = g.node(toState);
    
    if (!fromNode || !toNode) {
      console.warn(`‚ö†Ô∏è Missing node data for pair ${pairKey}`);
      continue;
    }
    
    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Ä–µ–±—Ä–∞
    const baseLabelX = (fromNode.x + toNode.x) / 2;
    const baseLabelY = (fromNode.y + toNode.y) / 2;
    
    console.log(`üéØ Processing transition group for ${pairKey}:`, {
      count: transitionGroup.length,
      baseLabelX,
      baseLabelY,
      fromNode: { x: fromNode.x, y: fromNode.y },
      toNode: { x: toNode.x, y: toNode.y }
    });
    
    if (transitionGroup.length > 1) {
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ transitions –º–µ–∂–¥—É –ø–∞—Ä–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
      const edgeVectorX = toNode.x - fromNode.x;
      const edgeVectorY = toNode.y - fromNode.y;
      const edgeLength = Math.sqrt(edgeVectorX * edgeVectorX + edgeVectorY * edgeVectorY);
      
      let perpX = 0;
      let perpY = 0;
      
      if (edgeLength > 0) {
        // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
        perpX = -edgeVectorY / edgeLength;
        perpY = edgeVectorX / edgeLength;
      }
      
      // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É labels
      const labelSpacing = 50; // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 35 –¥–æ 50
      const totalWidth = (transitionGroup.length - 1) * labelSpacing;
      const startOffset = -totalWidth / 2;
      
      transitionGroup.forEach((item, idx) => {
        const offset = startOffset + idx * labelSpacing;
        const finalLabelX = baseLabelX + perpX * offset;
        const finalLabelY = baseLabelY + perpY * offset;
        
        // –û—Ü–µ–Ω–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã transition label
        const labelWidth = 80; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ label
        const labelHeight = 25; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ label
        
        allTransitionPositions.push({
          transitionKey: item.transitionKey,
          x: finalLabelX,
          y: finalLabelY,
          width: labelWidth,
          height: labelHeight
        });
        
        console.log(`‚ûï Added multiple transition position for ${item.transitionKey}`);
      });
    } else {
      // –û–¥–∏–Ω–æ—á–Ω—ã–π transition
      const item = transitionGroup[0];
      const labelWidth = 80;
      const labelHeight = 25;
      
      allTransitionPositions.push({
        transitionKey: item.transitionKey,
        x: baseLabelX,
        y: baseLabelY,
        width: labelWidth,
        height: labelHeight
      });
      
      console.log(`‚ûï Added single transition position for ${item.transitionKey}`);
    }
  }

  // –í—ã–±–∏—Ä–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  let resolvedPositions: TransitionPosition[];
  if (isVertical) {
    // –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º force-directed –∞–ª–≥–æ—Ä–∏—Ç–º
    resolvedPositions = resolveTransitionCollisions(
      allTransitionPositions, 
      nodePositions, 
      nodeWidths, 
      nodeHeights
    );
  } else {
    // –î–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
    resolvedPositions = resolveHorizontalTransitionCollisions(
      allTransitionPositions
    );
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
  for (const position of resolvedPositions) {
    const edgeInfo = g.edges().find(edge => {
      const edgeData = g.edge(edge);
      return transitionMap.get(edgeData.id) === position.transitionKey;
    });
    
    let edgeMidX = 0;
    let edgeMidY = 0;
    
    if (edgeInfo) {
      const sourceNode = g.node(edgeInfo.v);
      const targetNode = g.node(edgeInfo.w);
      edgeMidX = (sourceNode.x + targetNode.x) / 2;
      edgeMidY = (sourceNode.y + targetNode.y) / 2;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–±—Ä–∞
    const originalX = position.originalX || edgeMidX;
    const originalY = position.originalY || edgeMidY;
    
    const relativeOffset = {
      x: Math.round(position.x - originalX),
      y: Math.round(position.y - originalY)
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –æ–±–æ–∏–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const internalTransitionId = keyToInternalId.get(position.transitionKey);
    if (internalTransitionId) {
      transitionPositions[internalTransitionId] = relativeOffset;
      console.log(`üéØ Mapped ${position.transitionKey} -> ${internalTransitionId}:`, relativeOffset);
    }
    
    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –∫–∞–∫ fallback
    transitionPositions[position.transitionKey] = relativeOffset;
  }

  console.log('üéØ Dagre Layout Results:');
  console.log('üìä Node positions:', nodePositions);
  console.log('üè∑Ô∏è Transition positions:', transitionPositions);
  console.log('üë• Transition groups:', Array.from(pairTransitions.entries()).map(([key, transitions]) => ({
    pair: key,
    count: transitions.length,
    transitions: transitions.map(t => t.transitionKey)
  })));
  console.log('üîß Collision resolution applied for', allTransitionPositions.length, 'transitions');
  console.log('üìè Final transition positions after collision resolution:', resolvedPositions.length, 'positions');

  return { nodePositions, transitionPositions };
}
