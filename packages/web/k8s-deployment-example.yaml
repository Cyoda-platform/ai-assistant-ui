---
# ConfigMap for non-sensitive configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: ai-assistant-web-config
  namespace: ai-assistant
data:
  # API Configuration
  APP_AI_API_BASE_value: "https://api.example.com"
  APP_QUESTION_POLLING_INTERVAL_MS_value: "5000"
  APP_QUESTION_MAX_POLLING_INTERVAL_value: "7000"
  
  # Cyoda Client Configuration
  APP_CYODA_CLIENT_HOST_value: "cyoda.example.com"
  APP_CYODA_CLIENT_ENV_PREFIX_value: "prod-"
  
  # Auth0 Configuration (non-sensitive)
  APP_AI_AUTH0_DOMAIN_value: "your-tenant.auth0.com"
  APP_AI_AUTH0_REDIRECT_URI_value: "https://app.example.com"
  APP_AI_AUTH0_AUDIENCE_value: "https://api.example.com"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: ai-assistant-web-secrets
  namespace: ai-assistant
type: Opaque
stringData:
  # API Authentication
  APP_AI_API_AUTH_value: "your-api-auth-token-here"
  
  # Auth0 Secrets
  APP_AI_AUTH0_CLIENT_ID_value: "your-auth0-client-id-here"
  APP_AI_AUTH0_ORGANIZATION_value: "your-auth0-org-id-here"

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-assistant-web
  namespace: ai-assistant
  labels:
    app: ai-assistant-web
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai-assistant-web
  template:
    metadata:
      labels:
        app: ai-assistant-web
        version: v1
      annotations:
        # Force pod restart when config changes
        checksum/config: "{{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}"
        checksum/secret: "{{ include (print $.Template.BasePath \"/secret.yaml\") . | sha256sum }}"
    spec:
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 101  # nginx user
        fsGroup: 101
      
      containers:
      - name: web
        image: your-registry/ai-assistant-web:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        
        # Environment variables from ConfigMap and Secret
        envFrom:
        - configMapRef:
            name: ai-assistant-web-config
        - secretRef:
            name: ai-assistant-web-secrets
        
        # Resource limits
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        # Liveness probe - checks if container is alive
        livenessProbe:
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness probe - checks if container is ready to serve traffic
        readinessProbe:
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Security context for the container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # nginx needs to write to /var/cache, /var/log
          runAsNonRoot: true
          runAsUser: 101
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE  # Allow binding to port 8080
      
      # Image pull secrets (if using private registry)
      # imagePullSecrets:
      # - name: registry-credentials

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: ai-assistant-web
  namespace: ai-assistant
  labels:
    app: ai-assistant-web
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: ai-assistant-web

---
# Ingress (example using nginx-ingress)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ai-assistant-web
  namespace: ai-assistant
  annotations:
    # Nginx ingress annotations
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # CORS settings (if needed)
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Rate limiting (optional)
    nginx.ingress.kubernetes.io/limit-rps: "100"
    
    # Certificate manager (if using cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - app.example.com
    secretName: ai-assistant-web-tls
  rules:
  - host: app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ai-assistant-web
            port:
              name: http

---
# HorizontalPodAutoscaler (optional)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ai-assistant-web
  namespace: ai-assistant
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ai-assistant-web
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max

---
# PodDisruptionBudget (optional, for high availability)
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ai-assistant-web
  namespace: ai-assistant
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: ai-assistant-web

